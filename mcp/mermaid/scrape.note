/*
Project: Mermaid Diagram Validation MCP Server (Node.js)

Files:
- package.json
- server.js
- Dockerfile
- docker-compose.yml
- README.md
*/

// ------------------------------
// package.json
// ------------------------------
{
  "name": "mermaid-validator",
  "version": "1.0.0",
  "description": "MCP server to validate Mermaid diagrams via HTTP REST API",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mermaid": "^10.0.0"
  }
}

// ------------------------------
// server.js
// ------------------------------
import express from 'express';
import mermaid from 'mermaid';

// Initialize Mermaid once
mermaid.initialize({ startOnLoad: false, securityLevel: 'strict' });

const app = express();
const PORT = process.env.PORT || 8000;

// Accept raw text bodies
app.use(express.text({ type: '*/*', limit: '100kb' }));

/**
 * POST /validate
 * Request body: raw Mermaid diagram text
 * Response: { valid: boolean, error?: string }
 */
app.post('/validate', (req, res) => {
  const diagramText = req.body || '';
  try {
    // parse throws on invalid syntax
    mermaid.parse(diagramText);
    res.json({ valid: true });
  } catch (err) {
    // err.str contains detailed message in some versions, fallback to err.message
    const message = err.str || err.message || 'Unknown parse error';
    res.json({ valid: false, error: message });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.send('OK');
});

app.listen(PORT, () => {
  console.log(`Mermaid Validator listening on port ${PORT}`);
});

// ------------------------------
// Dockerfile
// ------------------------------
# Use an official Node.js runtime
FROM node:18-alpine

WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN npm install --production

# Copy project files
COPY . .

# Expose port and start
EXPOSE 8000
CMD ["npm", "start"]

// ------------------------------
// docker-compose.yml
// ------------------------------
version: '3.8'
services:
  validator:
    build: .
    ports:
      - "8000:8000"
    environment:
      - PORT=8000

// ------------------------------
// README.md
// ------------------------------
# Mermaid Diagram Validator (Node.js)

This service validates Mermaid diagram syntax via an HTTP REST API.

## Endpoints

- **POST /validate**
  - Body: raw Mermaid text
  - Response JSON:
    - `valid` (boolean)
    - `error` (string) if `valid` is `false`

- **GET /health**
  - Returns `OK` when the service is running.

## Usage

1. Install & run locally:
   ```bash
   npm install
   npm start
   ```
2. Validate a diagram:
   ```bash
   curl -X POST http://localhost:8000/validate \
     -H 'Content-Type: text/plain' \
     --data 'graph TD; A-->B;'
   # => { "valid": true }

   curl -X POST http://localhost:8000/validate \
     -H 'Content-Type: text/plain' \
     --data 'graph TD A-->'
   # => { "valid": false, "error": "Syntax error at line 1" }
   ```

3. Docker:
   ```bash
   docker build -t mermaid-validator .
   docker run -p 8000:8000 mermaid-validator
   ```

4. Docker Compose:
   ```bash
   docker-compose up --build
   ```

## Crew AI Integration

Configure your Crew AI tool to call `http://<host>:8000/validate` with raw Mermaid text.  The API returns JSON with `valid` and optional `error`, so the agent can inspect those fields.
